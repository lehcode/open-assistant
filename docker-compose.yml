x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  # api
  api:
    build:
      dockerfile: node.Dockerfile
      context: ./apps
      args:
        - app_root=/home/${HOST_USER}/open-assistant/apps
        - node_version=${NODE_VERSION:-lts}
        - uid=${HOST_UID:-1000}
        - user=${HOST_USER}
        - gid=${HOST_GID:-1000}
        - debug=${DOCKER_DEBUG:-no}
        - yarn_version=${YARN_VERSION:-1.22.22}
    command: "yarn start-api --watch"
    working_dir: /home/${HOST_USER}/open-assistant/apps/api
    env_file:
      - .env
      - apps/api/.env
    networks:
      - assistant_lan
    ports:
      - "6300:${PORT:-3000}"
      - "6333:${HTTPS_PORT:-3443}"
      - "9229:9229"
    environment:
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-3000}
      - NODE_ENV=${NODE_ENV:-development}
      - DEV_PLATFORM=DOCKER
    volumes:
      - ./apps/api:/home/${HOST_USER}/open-assistant/apps/api
    tty: true
    depends_on:
      - postgres
      - mysql
      - redis
    pull_policy: "always"

  # PostgreSQL server on host port 6332
  postgres:
    image: postgres:${PG_VERSION:-alpine}
    environment:
      - POSTGRES_PASSWORD=${PG_PASSWORD:?}
      - POSTGRES_USER=${PG_USER:-docker}
      - POSTGRES_DB=${PG_DB:-docker}
      - PGDATA=${PG_DATA_DIR:-/var/lib/postgresql/data/pgdata}
      - POSTGRES_INITDB_ARGS=${PG_INITDB_ARGS:-}
    restart: always
    shm_size: 128mb
    volumes:
      - type: volume
        source: data_postgres
        target: ${PG_DATA_DIR:-/var/lib/postgresql/data/pgdata}
        volume:
          nocopy: true
    networks:
      - assistant_lan
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6332:5432"
    pull_policy: "always"

  # mysql on host port 6336
  mysql:
    image: mysql:${MYSQL_VERSION:-lts}
    container_name: mysql
    volumes:
      - type: volume
        source: data_mysql
        target: /var/lib/mysql
        volume:
          nocopy: true
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      - MYSQL_USER=${MYSQL_USER:-app}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-laravel}
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "5"
    restart: always
    networks:
      - assistant_lan
    ports:
      - "6336:3306"
    pull_policy: "always"

  # mongodb on host port 6337
  mongo:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    networks:
      - assistant_lan
    ports:
      - "6337:27017"
    pull_policy: "always"
    volumes:
      - data_mongo:/data/db

  # redis on host port 6339
  redis:
    image: redis:${REDIS_VERSION:-bullseye}
    container_name: redis-cache
    hostname: redis
    command: redis-server /usr/local/etc/redis/redis.conf
    sysctls:
      net.core.somaxconn: 1024
    volumes:
      - type: volume
        source: data_redis
        target: /var/lib/redis
        volume:
          nocopy: true
      - ./docker-assets/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6339:6379"
    networks:
      - assistant_lan
    user: redis:redis
    restart: unless-stopped
    pull_policy: "always"

volumes:
  data_mysql:
  data_redis:
  data_postgres:
  data_mongo:
