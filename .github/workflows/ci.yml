name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master", "develop" ]
    
env:
  NODE_OPTIONS: --max_old_space_size=4096
  FORCE_COLOR: true
  NX_SKIP_NX_CACHE: true # Skip Nx cache during CI
  NX_BRANCH: ${GITHUB_HEAD_REF:-$GITHUB_REF#refs/heads/}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

defaults:
  run:
    working-directory: ./apps

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for Nx affected commands
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
          cache-dependency-path: './apps/yarn.lock'
      
      # Clear Nx cache before install
      - name: Clear Nx Cache
        run: |
          rm -rf node_modules/.cache/nx
          rm -rf node_modules/.cache/jest
      
      - name: Install Dependencies
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile --prefer-offline
        
      - name: Lint Admin UI
        run: yarn nx run admin:lint --parallel=true

      # - name: Lint API
      #   run: yarn nx run api:lint --parallel=true
        
      - name: Type Check
        run: yarn nx run-many --projects=admin,api --target=format:check --parallel=true

  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: './apps/yarn.lock'
      
      - name: Clear Nx Cache
        run: |
          rm -rf node_modules/.cache/nx
          rm -rf node_modules/.cache/jest
      
      - name: Install Dependencies
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile --prefer-offline
      
      - name: Run Tests
        run: yarn nx run-many --projects=admin,api,shared --target=test --parallel=true --coverage
      
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: apps/coverage/
          retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
          cache-dependency-path: './apps/yarn.lock'
      
      - name: Clear Nx Cache
        run: |
          rm -rf node_modules/.cache/nx
          rm -rf node_modules/.cache/jest
      
      - name: Install Dependencies
        run: |
          yarn config set network-timeout 300000
          yarn install --frozen-lockfile --prefer-offline
      
      - name: Build
        run: yarn nx run-many --projects=admin,api --target=build --parallel=true
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: apps/dist/
          retention-days: 7
